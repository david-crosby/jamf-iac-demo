name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-apply.yml'

permissions:
  contents: read
  issues: write

jobs:
  terraform-apply:
    name: Apply Terraform Changes
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_VAR_jamf_instance_fqdn: ${{ secrets.JAMF_INSTANCE_FQDN }}
          TF_VAR_jamf_auth_method: "oauth2"
          TF_VAR_jamf_client_id: ${{ secrets.JAMF_CLIENT_ID }}
          TF_VAR_jamf_client_secret: ${{ secrets.JAMF_CLIENT_SECRET }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        working-directory: ./terraform
        env:
          TF_VAR_jamf_instance_fqdn: ${{ secrets.JAMF_INSTANCE_FQDN }}
          TF_VAR_jamf_auth_method: "oauth2"
          TF_VAR_jamf_client_id: ${{ secrets.JAMF_CLIENT_ID }}
          TF_VAR_jamf_client_secret: ${{ secrets.JAMF_CLIENT_SECRET }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false tfplan
        working-directory: ./terraform
        env:
          TF_VAR_jamf_instance_fqdn: ${{ secrets.JAMF_INSTANCE_FQDN }}
          TF_VAR_jamf_auth_method: "oauth2"
          TF_VAR_jamf_client_id: ${{ secrets.JAMF_CLIENT_ID }}
          TF_VAR_jamf_client_secret: ${{ secrets.JAMF_CLIENT_SECRET }}

      - name: Create deployment notification
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ steps.apply.outcome }}' === 'success' ? '✅ Success' : '❌ Failed';
            const title = `Terraform Deployment ${status}`;
            const body = `### Terraform Apply Result
            
            **Status:** ${status}
            **Commit:** ${{ github.sha }}
            **Actor:** @${{ github.actor }}
            **Workflow:** [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${status.includes('Success') ? 'Changes have been successfully applied to Jamf Pro.' : 'Deployment failed. Please check the workflow logs.'}`;

            // Find existing deployment issue or create new one
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'deployment',
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Comment on existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
            }

      - name: Terraform Show (for debugging)
        if: failure()
        run: terraform show
        working-directory: ./terraform

  notify-slack:
    name: Notify Slack (Optional)
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "Terraform deployment ${{ needs.terraform-apply.result }} for Jamf Pro",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Terraform Deployment*\n*Status:* ${{ needs.terraform-apply.result }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Actor:* ${{ github.actor }}"
                  }
                }
              ]
            }
